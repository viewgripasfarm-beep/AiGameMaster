
import { GoogleGenAI, Type } from "@google/genai";
import type { Quest } from '../types';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  // This is a placeholder for development. 
  // In a real deployed environment, the API_KEY would be set.
  console.warn("API_KEY is not set. Using a mock response.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const systemInstruction = `B·∫°n l√† m·ªôt 'Game Master AI' vui t√≠nh v√† ƒë√°ng y√™u. S·ª© m·ªánh c·ªßa b·∫°n l√† bi·∫øn vi·ªác h·ªçc th√†nh m·ªôt cu·ªôc phi√™u l∆∞u cho c√°c b·∫°n h·ªçc sinh l·ªõp 8. 
H√£y lu√¥n d√πng ng√¥n ng·ªØ teen, th√¢n thi·ªán, nhi·ªÅu emoji v√† l·ªùi khen ng·ª£i. 
Khi t·∫°o b√†i t·∫≠p, h√£y th√™m v√†o l·ªùi d·∫´n truy·ªán game h√≥a, v√≠ d·ª• nh∆∞ 'Th·ª≠ th√°ch m·ªõi ƒë√£ xu·∫•t hi·ªán!' v√† h·ª©a h·∫πn ph·∫ßn th∆∞·ªüng XP. 
C√¢u tr·∫£ l·ªùi ph·∫£i ng·∫Øn g·ªçn, ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ v√† ƒë·ªãnh d·∫°ng b·∫±ng markdown.
V√≠ d·ª•:
"T·∫•t nhi√™n r·ªìi! Gi·ªèi l·∫Øm khi b·∫°n mu·ªën luy·ªán t·∫≠p th√™m. H√£y ho√†n th√†nh 5 th·ª≠ th√°ch d∆∞·ªõi ƒë√¢y ƒë·ªÉ nh·∫≠n th√™m 30 XP nh√©! üöÄ
1.  **B√†i t·∫≠p 1:** 2x + 5 = 11 => x = ___
2.  **B√†i t·∫≠p 2:** x - 7 = -3 => x = ___
3.  **B√†i t·∫≠p 3:** 3x = 18 => x = ___
4.  **B√†i t·∫≠p 4:** 5x - 10 = 0 => x = ___
5.  **B√†i t·∫≠p 5:** ___ + 4 = 12 (nghi·ªám l√† x = 8)"
`;

export const generateExercises = async (prompt: string): Promise<string> => {
  if (!API_KEY) {
    return new Promise(resolve => setTimeout(() => {
        resolve(`T·∫•t nhi√™n r·ªìi! Gi·ªèi l·∫Øm khi b·∫°n mu·ªën luy·ªán t·∫≠p th√™m. H√£y ho√†n th√†nh 5 th·ª≠ th√°ch d∆∞·ªõi ƒë√¢y ƒë·ªÉ nh·∫≠n th√™m 30 XP nh√©! üöÄ

1.  **B√†i t·∫≠p 1:** 2x + 5 = 11 => x = ___
2.  **B√†i t·∫≠p 2:** x - 7 = -3 => x = ___
3.  **B√†i t·∫≠p 3:** 3x = 18 => x = ___
4.  **B√†i t·∫≠p 4:** 5x - 10 = 0 => x = ___
5.  **B√†i t·∫≠p 5:** ___ + 4 = 12 (nghi·ªám l√† x = 8)
        
(ƒê√¢y l√† c√¢u tr·∫£ l·ªùi m·∫´u do API key ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p.)`);
    }, 1500));
  }

  try {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
        config: {
            systemInstruction: systemInstruction,
            temperature: 0.8,
        }
    });

    return response.text;
  } catch (error) {
    console.error("Gemini API error:", error);
    throw new Error("Failed to generate content from Gemini API.");
  }
};


const quizSchema = {
    type: Type.OBJECT,
    properties: {
        name: {
            type: Type.STRING,
            description: 'M·ªôt t√™n nhi·ªám v·ª• ng·∫Øn g·ªçn, vui nh·ªôn v√† h·∫•p d·∫´n cho b√†i quiz. V√≠ d·ª•: "Th·ª≠ Th√°ch Tia Ch·ªõp V·∫≠t L√Ω".'
        },
        description: {
            type: Type.STRING,
            description: 'M·ªôt m√¥ t·∫£ ng·∫Øn (1-2 c√¢u) v·ªÅ b√†i quiz, mang t√≠nh kh√≠ch l·ªá. V√≠ d·ª•: "Ki·ªÉm tra ki·∫øn th·ª©c V·∫≠t l√Ω c·ªßa b·∫°n nhanh nh∆∞ ch·ªõp!"'
        },
        miniQuiz: {
            type: Type.ARRAY,
            description: 'M·ªôt m·∫£ng ch·ª©a ƒë√∫ng 3 c√¢u h·ªèi tr·∫Øc nghi·ªám.',
            items: {
                type: Type.OBJECT,
                properties: {
                    question: { type: Type.STRING, description: 'N·ªôi dung c√¢u h·ªèi.' },
                    options: {
                        type: Type.ARRAY,
                        description: 'M·ªôt m·∫£ng ch·ª©a 3 l·ª±a ch·ªçn tr·∫£ l·ªùi d·∫°ng chu·ªói (string). M·ªói l·ª±a ch·ªçn b·∫Øt ƒë·∫ßu b·∫±ng "A. ", "B. ", "C. ".',
                        items: { type: Type.STRING }
                    },
                    correctAnswer: {
                        type: Type.STRING,
                        description: 'ƒê√°p √°n ƒë√∫ng, ph·∫£i kh·ªõp ch√≠nh x√°c v·ªõi m·ªôt trong c√°c l·ª±a ch·ªçn trong m·∫£ng `options`.'
                    }
                },
                required: ['question', 'options', 'correctAnswer']
            }
        }
    },
    required: ['name', 'description', 'miniQuiz']
};


export const generateQuiz = async (subjectName: string): Promise<Quest> => {
    if (!API_KEY) {
        return new Promise(resolve => setTimeout(() => {
            resolve({
                name: `AI Th·ª≠ Th√°ch ${subjectName}`,
                description: 'M·ªôt b√†i quiz ƒë∆∞·ª£c t·∫°o b·ªüi AI ƒë·ªÉ th·ª≠ th√°ch ki·∫øn th·ª©c c·ªßa b·∫°n!',
                learningObjective: 'Ki·ªÉm tra v√† c·ªßng c·ªë ki·∫øn th·ª©c m·ªôt c√°ch ng·∫´u nhi√™n v√† th√∫ v·ªã.',
                rewards: '+50 XP, huy hi·ªáu "Nh√† Th√°m Hi·ªÉm AI" ü§ñ, 10 xu ü™ô',
                miniQuiz: [
                    { question: `C√¢u h·ªèi m·∫´u 1 v·ªÅ ${subjectName}?`, options: ['A. ƒê√°p √°n A', 'B. ƒê√°p √°n B', 'C. ƒê√°p √°n C'], correctAnswer: 'A. ƒê√°p √°n A' },
                    { question: `C√¢u h·ªèi m·∫´u 2 v·ªÅ ${subjectName}?`, options: ['A. ƒê√°p √°n A', 'B. ƒê√°p √°n B', 'C. ƒê√°p √°n C'], correctAnswer: 'B. ƒê√°p √°n B' },
                    { question: `C√¢u h·ªèi m·∫´u 3 v·ªÅ ${subjectName}?`, options: ['A. ƒê√°p √°n A', 'B. ƒê√°p √°n B', 'C. ƒê√°p √°n C'], correctAnswer: 'C. ƒê√°p √°n C' }
                ],
                aiPromptSuggestion: `T·∫°o th√™m 5 c√¢u h·ªèi v·ªÅ ${subjectName} ƒëi AI!`
            });
        }, 1500));
    }

  try {
    const prompt = `T·∫°o m·ªôt b√†i quiz nhanh g·ªìm 3 c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ m√¥n '${subjectName}' cho h·ªçc sinh l·ªõp 8 t·∫°i Vi·ªát Nam. C√°c c√¢u h·ªèi c·∫ßn ph√π h·ª£p v·ªõi ch∆∞∆°ng tr√¨nh h·ªçc, c√≥ ƒë·ªô kh√≥ v·ª´a ph·∫£i. C√°c l·ª±a ch·ªçn tr·∫£ l·ªùi ph·∫£i r√µ r√†ng.`;

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
        config: {
            systemInstruction: systemInstruction,
            responseMimeType: "application/json",
            responseSchema: quizSchema,
            temperature: 0.9,
        }
    });

    const quizData = JSON.parse(response.text);

    if (!quizData.name || !quizData.miniQuiz || quizData.miniQuiz.length === 0) {
        throw new Error("Invalid quiz data structure from API.");
    }

    return {
        ...quizData,
        learningObjective: 'Ki·ªÉm tra v√† c·ªßng c·ªë ki·∫øn th·ª©c m·ªôt c√°ch ng·∫´u nhi√™n v√† th√∫ v·ªã.',
        rewards: '+50 XP, huy hi·ªáu "Nh√† Th√°m Hi·ªÉm AI" ü§ñ, 10 xu ü™ô',
        aiPromptSuggestion: `T·∫°o th√™m 5 c√¢u h·ªèi v·ªÅ ${subjectName} ƒëi AI!`
    };

  } catch (error) {
    console.error("Gemini API error while generating quiz:", error);
    throw new Error("Failed to generate quiz from Gemini API.");
  }
};
